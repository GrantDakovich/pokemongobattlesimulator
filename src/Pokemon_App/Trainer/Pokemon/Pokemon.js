import React, {Component} from 'react';


class Pokemon extends Component {
	constructor(props){
		// Props will contain:
		//   - pokemon name -> props.name
		//   - a maximum cp generated by the selected 
		//     pokemon -> props.max_cp
		//   - list of quick moves -> props.quick_moves
		//   - list of charge moves -> props.charge_moves

		//   - write to props.pokemon_obj
		super(props)
		this.state = {
			inputErrors: {
				CPError: false
			}
		}
	}

	handleAttackChange(event) {
		this.props.pokemon_obj.appraised_attack = event.target.value;

	}
	handleDefenseChange(event) {
		this.props.pokemon_obj.appraised_defense = event.target.value;
	}
	handleStaminaChange(event) {
		this.props.pokemon_obj.appraised_stamina = event.target.value;
	}
	handleCPChange(event) {
		this.props.pokemon_obj.actual_cp = event.target.value;
		this.setState({
			inputErrors: {
				...this.state.inputErrors,
				staminaError: !(/^\d*$/.test(event.target.value))
			}
		});
	}

	handleStardustChange(event) {
		this.props.pokemon_obj.stardust = event.target.value;
	}

	handleHPChange(event){
		this.props.pokemon_obj.hp = event.target.value;
	}

	handleQuickMoveChange(event) {
		this.props.pokemon_obj.actual_quick_move = event.target.value;
	}

	hangleChargeMoveChange(event) {
		this.props.pokemon_obj.actual_charge_move = event.target.value;
	}

	render(){
		let quick_move_options = null;
		quick_move_options = this.props.quick_moves.map((data) => 
      		<option value={data.name}>
        		{data.name}
      		</option>
    	);	

		let charge_move_options = null;
		charge_move_options = this.props.charge_moves.map((data) => 
      		<option value={data.name}>
        		{data.name}
      		</option>
    	);		


		let CPError = null;
		if (this.state.inputErrors.CPError){
			var errorStyle = {
				color: 'red'
			}
			CPError = <div style={errorStyle}>Error, CP input must input a number!!</div>;
		}
		// Create 0 to 15 options in jsx
		var zeroToFifteenOptionsJSX = [];
		for (let i = 0; i <= 15; i++){
			zeroToFifteenOptionsJSX.push(<option value={i}>{i}</option>)
		}
		return (

			<div>
				Pokemon:
				{CPError}
				{this.props.name}
				CP: <input onChange={this.handleCPChange.bind(this)} type="text"/>	
				Stardust:
				<select onChange={(event) => {this.handleStardustChange(event)}}>
					<option value="200">200</option>
					<option value="400">400</option>
					<option value="600">600</option>
					<option value="800">800</option>
					<option value="1000">1000</option>
					<option value="1300">1300</option>
					<option value="1600">1600</option>
					<option value="1900">1900</option>
					<option value="2200">2200</option>
					<option value="2500">2500</option>
					<option value="3000">3000</option>
					<option value="3500">3500</option>
					<option value="4000">4000</option>
					<option value="4500">4500</option>
					<option value="5000">5000</option>
					<option value="6000">6000</option>
					<option value="7000">7000</option>
					<option value="8000">8000</option>
					<option value="9000">9000</option>
					<option value="10000">10000</option>
				</select>
				HP:
				<input onChange={this.handleHPChange.bind(this)} type="text"/>

				Appraised Attack: 
				<select onChange={(event) => {this.handleAttackChange(event)}}>
					{zeroToFifteenOptionsJSX}
				</select>

				Appraised Defense: 
				<select onChange={(event) => {this.handleDefenseChange(event)}}>
					{zeroToFifteenOptionsJSX}
				</select>
				Appraised Stamina: 
				<select onChange={(event) => {this.handleStaminaChange(event)}}>
					{zeroToFifteenOptionsJSX}
				</select>
				Quick Move: 
				<select onChange={this.handleQuickMoveChange.bind(this)}>
					<option default>--Select Quick Move--</option>
					{quick_move_options}
				</select>
				Charge Move:
				<select onChange={this.hangleChargeMoveChange.bind(this)}>
					<option default>--Select Charge Move--</option>
					{charge_move_options}
				</select>
			</div>
		);
	}
}

export default Pokemon;



